{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "",
    "Metadata": {},
    "Parameters": {
        "TagStack": {
            "Description": "Tag Parameter",
            "Type": "String",
            "Default": "andromeda"
        }
    },
    "Mappings": {},
    "Conditions": {},
    "Resources": {
        "inputS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private",
                "BucketName": {
                    "Fn::Join": [
                        "-",
                        [
                            "cloudninja-input",
                            {
                                "Ref": "TagStack"
                            }
                        ]
                    ]
                },
                "NotificationConfiguration": {
                    "LambdaConfigurations": [
                        {
                            "Event": "s3:ObjectCreated:Put",
                            "Function": {
                                "Fn::GetAtt": [
                                    "lambdaS3ToETS",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                }
            },
            "DependsOn": "S3ToETSPermission"
        },
        "outputS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private",
                "BucketName": {
                    "Fn::Join": [
                        "-",
                        [
                            "cloudninja-output",
                            {
                                "Ref": "TagStack"
                            }
                        ]
                    ]
                },
                "NotificationConfiguration": {
                    "LambdaConfigurations": [
                        {
                            "Event": "s3:ObjectCreated:Put",
                            "Function": {
                                "Fn::GetAtt": [
                                    "lambdaS3ToDsbAndSNS",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                }
            },
            "DependsOn": "S3ToDsbAndSNSPermission"
        },
        "S3ToETSPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "lambdaS3ToETS",
                        "Arn"
                    ]
                },
                "Principal": "s3.amazonaws.com"
            },
            "DependsOn": "lambdaS3ToETS"
        },
        "S3ToDsbAndSNSPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "lambdaS3ToDsbAndSNS",
                        "Arn"
                    ]
                },
                "Principal": "s3.amazonaws.com"
            },
            "DependsOn": "lambdaS3ToDsbAndSNS"
        },
        "lambdaS3ToETS": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "serverless-code",
                    "S3Key": "lambda/lambda-transcode.zip"
                },
                "Description": "Function to create job into ETS",
                "FunctionName": "cloudninja-S3ToETS",
                "Handler": "lambda_function.lambda_handler",
                "MemorySize": 128,
                "Role": "arn:aws:iam::939664253159:role/lambda_s3_exec_role",
                "Runtime": "python2.7",
                "Timeout": 60
            }
        },
        "lambdaS3ToDsbAndSNS": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "from __future__ import print_function",
                                            "import json",
                                            "import urllib",
                                            "import boto3",
                                            "import time",
                                            "print('Loading function')",
                                            "##### Instanciando os servicos",
                                            "s3 = boto3.client('s3')",
                                            "dynamodb = boto3.resource('dynamodb')",
                                            "sns = boto3.client('sns')",
                                            "##### Acessando Tabela do DynamoDB",
                                            "table = dynamodb.Table('"
                                        ]
                                    ]
                                },
                                {
                                    "Ref": "dynamodbVideos"
                                },
                                {
                                    "Fn::Join": [
                                        "\n",
                                        [                                            
                                            "')",
                                            "##### EndPoint do CloudFront",
                                            "cloudfront = ('http://d397nnvlvhwg5r.cloudfront.net/')",
                                            "##### ARN do Topic do SNS",
                                            "topicARN = ('"
                                        ]
                                    ]
                                },
                                {
                                    "Ref": "snsTopicVideos"
                                },
                                {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "')",
                                            "def lambda_handler(event, context):",
                                            "    #print('Received event: ' + json.dumps(event, indent=2))",
                                            "    # Get the object from the event and show its content type",
                                            "    bucket = event['Records'][0]['s3']['bucket']['name']",
                                            "    key = urllib.unquote_plus(event['Records'][0]['s3']['object']['key']).decode('utf8')",
                                            "    try:",
                                            "        ##### Obtendo resposta do Evento",
                                            "        response = s3.get_object(Bucket=bucket, Key=key)",
                                            "        ##### Inserindo no DynamoDB os dados do acesso ao video e Status.",
                                            "        put_item_dynamo = table.put_item(",
                                            "            Item = {",
                                            "                'Name': key,",
                                            "                'Info': response['ContentType'],",
                                            "                'Status': '0',",
                                            "                'VotosAFavor': 0,",
                                            "                'VotosContra': 0,",
                                            "                'Link': cloudfront + key",
                                            "                }",
                                            "        )",
                                            "        ##### Enviando alerta de video disponivel.",
                                            "        snsPublish = sns.publish(",
                                            "            TopicArn = topicARN,",
                                            "            Message = 'Novo video disponivel. Para acessar o video acessar o Link: '+ cloudfront + key,",
                                            "            Subject = 'Demo Summit! Tem novidade ai.',",
                                            "            MessageStructure = 'Raw',",
                                            "        )",
                                            "        print('CONTENT TYPE: ' + response['ContentType'])",
                                            "        return response['ContentType']",
                                            "    except Exception as e:",
                                            "        print(e)",
                                            "        print('Error getting object {} from bucket {}. Make sure they exist and your bucket is in the same region as this function.'.format(key, bucket))",
                                            "        raise e"
                                        ]
                                    ]
                                }
                            ]
                        ]
                    }
                },
                "Description": "Function to create insert data into DynamoDB and publish into SNS",
                "FunctionName": "cloudninja-S3ToDdbAndSNS",
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Role": "arn:aws:iam::939664253159:role/lambda_s3_exec_role",
                "Runtime": "python2.7",
                "Timeout": 60
            },
            "DependsOn": "snsTopicVideos"
        },
        "snsTopicVideos": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": "Videos-CF",
                "TopicName": "videos-cf"
            },
            "DependsOn": "dynamodbVideos"
        },
        "dynamodbVideos": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "Name",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "Name",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                },
                "TableName": "Videos-CF"
            }
        }
    },
    "Outputs": {
        "inputBucketName": {
            "Value": {
                "Fn::GetAtt": [
                    "inputS3Bucket",
                    "DomainName"
                ]
            }
        },
        "outputBucketName": {
            "Value": {
                "Fn::GetAtt": [
                    "outputS3Bucket",
                    "DomainName"
                ]
            }
        }
    }
}